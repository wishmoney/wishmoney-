{
  "file": "zawy-lwma-difficulty-algorithm.json",
  "description": "Add Zawy LWMA difficulty algorithm option (https://github.com/zawy12/difficulty-algorithms/issues/3)",
  "status": "In development",
  "required": [
    "core/bytecoin.json",
    "versionized-parameters.json"
  ],
  "files": [
    {
      "path": "/src/CryptoNoteCore/Currency.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "size_t m_blockGrantedFullRewardZone;",
          "parameters": {
            "text": [
              "  uint32_t m_zawyLWMADifficultyBlockIndex;",
              "  uint32_t m_zawyLWMADifficultyLastBlock;",
              "  uint64_t m_zawyLWMADifficultyMin;",
              "  size_t m_zawyLWMADifficultyN;"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "CurrencyBuilder& blockGrantedFullRewardZone(size_t val)",
          "parameters": {
            "text": [
              "  CurrencyBuilder& zawyLWMADifficultyBlockIndex(uint32_t val) { m_currency.m_zawyLWMADifficultyBlockIndex = val; return *this; }",
              "  CurrencyBuilder& zawyLWMADifficultyLastBlock(uint32_t val) { m_currency.m_zawyLWMADifficultyLastBlock = val; return *this; }",
              "  CurrencyBuilder& zawyLWMADifficultyMin(uint64_t val) { m_currency.m_zawyLWMADifficultyMin = val; return *this; }",
              "  CurrencyBuilder& zawyLWMADifficultyN(size_t val) { m_currency.m_zawyLWMADifficultyN = val; return *this; }"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "size_t blockGrantedFullRewardZone()",
          "parameters": {
            "text": [
              "  uint32_t zawyLWMADifficultyBlockIndex() const { return m_zawyLWMADifficultyBlockIndex; }",
              "  uint32_t zawyLWMADifficultyLastBlock() const { return m_zawyLWMADifficultyLastBlock; }",
              "  uint64_t zawyLWMADifficultyMin() const { return m_zawyLWMADifficultyMin; }",
              "  size_t zawyLWMADifficultyN() const { return m_zawyLWMADifficultyN; }"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/Currency.cpp",
      "changes": [
        {
          "action": "add_above",
          "marker": "blockGrantedFullRewardZone(parameters::CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE);",
          "parameters": {
            "text": [
              "zawyLWMADifficultyBlockIndex(parameters::ZAWY_LWMA_DIFFICULTY_BLOCK_INDEX);",
              "zawyLWMADifficultyLastBlock(parameters::ZAWY_LWMA_DIFFICULTY_LAST_BLOCK);",
              "zawyLWMADifficultyMin(parameters::ZAWY_LWMA_DIFFICULTY_MIN);",
              "zawyLWMADifficultyN(parameters::ZAWY_LWMA_DIFFICULTY_N);"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "m_testnet(currency.m_testnet),",
          "parameters": {
            "text": [
              "m_zawyLWMADifficultyBlockIndex(currency.m_zawyLWMADifficultyBlockIndex),",
              "m_zawyLWMADifficultyLastBlock(currency.m_zawyLWMADifficultyLastBlock),",
              "m_zawyLWMADifficultyMin(currency.m_zawyLWMADifficultyMin),",
              "m_zawyLWMADifficultyN(currency.m_zawyLWMADifficultyN),"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteConfig.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "const unsigned EMISSION_SPEED_FACTOR",
          "parameters": {
            "text": [
              "const uint32_t ZAWY_LWMA_DIFFICULTY_BLOCK_INDEX                 = %s;"
            ],
            "replace_text_alt": [
              "const uint32_t ZAWY_LWMA_DIFFICULTY_BLOCK_INDEX                 = 0;"
            ],
            "var": "ZAWY_LWMA_DIFFICULTY_BLOCK_INDEX"
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteConfig.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "const unsigned EMISSION_SPEED_FACTOR",
          "parameters": {
            "text": [
              "const uint32_t ZAWY_LWMA_DIFFICULTY_LAST_BLOCK                 = %s;"
            ],
            "replace_text_alt": [
              "const uint32_t ZAWY_LWMA_DIFFICULTY_LAST_BLOCK                 = 0;"
            ],
            "var": "ZAWY_LWMA_DIFFICULTY_LAST_BLOCK"
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteConfig.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "const unsigned EMISSION_SPEED_FACTOR",
          "parameters": {
            "text": [
              "const uint64_t ZAWY_LWMA_DIFFICULTY_MIN                 = %s;"
            ],
            "replace_text_alt": [
              "const uint64_t ZAWY_LWMA_DIFFICULTY_MIN                 = 1;"
            ],
            "var": "ZAWY_LWMA_DIFFICULTY_MIN"
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteConfig.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "const unsigned EMISSION_SPEED_FACTOR",
          "parameters": {
            "text": [
              "const size_t ZAWY_LWMA_DIFFICULTY_N                 = %s;"
            ],
            "replace_text_alt": [
              "const size_t ZAWY_LWMA_DIFFICULTY_N                 = 0;"
            ],
            "var": "ZAWY_LWMA_DIFFICULTY_N"
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/Currency.h",
      "changes": [
        {
          "action": "add_below",
          "marker": "Difficulty nextDifficulty(std::vector<uint64_t> timestamps, std::vector<Difficulty> cumulativeDifficulties) const;",
          "parameters": {
            "text": [
              "Difficulty nextDifficultyZawyLWMA(uint8_t version, uint32_t blockIndex, std::vector<uint64_t> timestamps, std::vector<Difficulty> cumulativeDifficulties) const;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/Currency.cpp",
      "changes": [
        {
          "action": "add_below",
          "marker": "#include <cctype>",
          "parameters": {
            "text": [
              "#include <math.h>"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "return nextDifficultyDefault(version, blockIndex, timestamps, cumulativeDifficulties);",
          "parameters": {
            "text": [
              "  if (m_zawyLWMADifficultyBlockIndex && m_zawyLWMADifficultyBlockIndex <= blockIndex && (m_zawyLWMADifficultyLastBlock == 0 || m_zawyLWMADifficultyLastBlock >= blockIndex)) {",
              "    return nextDifficultyZawyLWMA(version, blockIndex, timestamps, cumulativeDifficulties);",
              "}"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "Difficulty Currency::nextDifficultyDefault(uint8_t version, uint32_t blockIndex, std::vector<uint64_t> timestamps,",
          "parameters": {
            "text": [
                "Difficulty Currency::nextDifficultyZawyLWMA(uint8_t version, uint32_t blockIndex, std::vector<uint64_t> timestamps,",
                "  std::vector<Difficulty> cumulativeDifficulties) const {",
                "    // LWMA difficulty algorithm",
                "    // Copyright (c) 2017-2018 Zawy",
                "    // MIT license http://www.opensource.org/licenses/mit-license.php.",
                "    // This is an improved version of Tom Harding's (Deger8) \"WT-144\"  ",
                "    // Karbowanec, Masari, Bitcoin Gold, and Bitcoin Cash have contributed.",
                "    // See https://github.com/zawy12/difficulty-algorithms/issues/1 for other algos.",
                "    // Do not use \"if solvetime < 0 then solvetime = 1\" which allows a catastrophic exploit.",
                "    // T= target_solvetime;",
                "    // N = int(45 * (600 / T) ^ 0.3));",
                "    //",
                "    // You can manually assign N: ZAWY_LWMA_DIFFICULTY_N",
                "",
                "    const int64_t T = static_cast<int64_t>(m_difficultyTarget);",
                "    const size_t N = m_zawyLWMADifficultyN ? m_zawyLWMADifficultyN : uint32_t(45 * std::pow(((double_t)600 / T), 0.3));",
                "",
                "    if (timestamps.size() > N + 1) {",
                "      timestamps.resize(N + 1);",
                "      cumulativeDifficulties.resize(N + 1);",
                "    }",
                "    size_t n = timestamps.size();",
                "    assert(n == cumulativeDifficulties.size());",
                "    assert(n <= N);",
                "    if (n <= 1)",
                "      return 1;",
                "",
                "    // To get an average solvetime to within +/- ~0.1%, use an adjustment factor.",
                "    const double_t adjust = 0.998;",
                "    // The divisor k normalizes LWMA.",
                "    const double_t k = N * (N + 1) / 2;",
                "",
                "    double_t LWMA(0), sum_inverse_D(0), harmonic_mean_D(0), nextDifficulty(0);",
                "    int64_t solveTime(0);",
                "    uint64_t difficulty(0), next_difficulty(0);",
                "",
                "    // Loop through N most recent blocks.",
                "    for (int64_t i = 1; i <= N; i++) {",
                "      solveTime = static_cast<int64_t>(timestamps[i]) - static_cast<int64_t>(timestamps[i - 1]);",
                "      solveTime = std::min<int64_t>((T * 7), std::max<int64_t>(solveTime, (-6 * T)));",
                "      difficulty = cumulativeDifficulties[i] - cumulativeDifficulties[i - 1];",
                "      LWMA += solveTime * i / k;",
                "      sum_inverse_D += 1 / static_cast<double_t>(difficulty);",
                "    }",
                "",
                "    // Keep LWMA sane in case something unforeseen occurs.",
                "    if (static_cast<int64_t>(std::round(LWMA)) < T / 20)",
                "      LWMA = static_cast<double_t>(T / 20);",
                "",
                "    harmonic_mean_D = N / sum_inverse_D * adjust;",
                "    nextDifficulty = harmonic_mean_D * T / LWMA;",
                "    next_difficulty = static_cast<uint64_t>(nextDifficulty);",
                "    ",
                "    // minimum limit",
                "    if (next_difficulty < m_zawyLWMADifficultyMin) {",
                "      next_difficulty = m_zawyLWMADifficultyMin;",
                "    }",
                "",

                "    return next_difficulty;",
                "}",
                ""
            ]
          }
        }
      ]
    }
  ]
}

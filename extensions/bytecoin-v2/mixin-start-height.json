{
  "file": "mixin-start-height.json",
  "description": "Ability to start getting output keys for mixin after global index",
  "required": [
    "core/bytecoin.json"
  ],
  "files": [
    {
      "path": "/src/CryptoNoteCore/Currency.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "size_t m_blockGrantedFullRewardZone;",
          "parameters": {
            "text": [
              "  uint32_t m_mixinStartHeight;"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "CurrencyBuilder& blockGrantedFullRewardZone(size_t val)",
          "parameters": {
            "text": [
              "  CurrencyBuilder& mixinStartHeight(uint32_t val) { m_currency.m_mixinStartHeight = val; return *this; }"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "size_t blockGrantedFullRewardZone()",
          "parameters": {
            "text": [
              "  uint32_t mixinStartHeight() const { return m_mixinStartHeight; }"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/Currency.cpp",
      "changes": [
        {
          "action": "add_above",
          "marker": "blockGrantedFullRewardZone(parameters::CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE);",
          "parameters": {
            "text": [
              "mixinStartHeight(parameters::MIXIN_START_HEIGHT);"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "m_testnet(currency.m_testnet),",
          "parameters": {
            "text": [
              "m_mixinStartHeight(currency.m_mixinStartHeight),"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteConfig.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "const unsigned EMISSION_SPEED_FACTOR",
          "parameters": {
            "text": [
              "const uint32_t MIXIN_START_HEIGHT                          = %s;"
            ],
            "replace_text_alt": [
              "const uint32_t MIXIN_START_HEIGHT                          = 0;"
            ],
            "var": "MIXIN_START_HEIGHT"
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/Core.cpp",
      "changes": [
        {
          "action": "add_above",
          "marker": "auto upperBlockLimit = getTopBlockIndex() - currency.minedMoneyUnlockWindow();",
          "parameters": {
            "text": [
              "// Add bottomBlockLimit",
              "auto bottomBlockLimit = currency.mixinStartHeight();"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "globalIndexes = chainsLeaves[0]->getRandomOutsByAmount(amount, count, getTopBlockIndex());",
          "parameters": {
            "text": [
              " globalIndexes = chainsLeaves[0]->getRandomOutsByAmount(amount, count, getTopBlockIndex(), bottomBlockLimit);"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/IBlockchainCache.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "virtual std::vector<uint32_t> getRandomOutsByAmount(uint64_t amount, size_t count, uint32_t blockIndex) const = 0;",
          "parameters": {
            "text": [
              "virtual std::vector<uint32_t> getRandomOutsByAmount(uint64_t amount, size_t count, uint32_t blockIndex, uint32_t startBlockIndex) const = 0;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/BlockchainCache.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "virtual std::vector<uint32_t> getRandomOutsByAmount(uint64_t amount, size_t count, uint32_t blockIndex) const override;",
          "parameters": {
            "text": [
              "  virtual std::vector<uint32_t> getRandomOutsByAmount(uint64_t amount, size_t count, uint32_t blockIndex, uint32_t startBlockIndex) const override;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/BlockchainCache.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "std::vector<uint32_t> BlockchainCache::getRandomOutsByAmount(Amount amount, size_t count, uint32_t blockIndex) const {",
          "parameters": {
            "text": [
              "std::vector<uint32_t> BlockchainCache::getRandomOutsByAmount(Amount amount, size_t count, uint32_t blockIndex) const {",
              "  return getRandomOutsByAmount(amount, count, blockIndex, 0);",
              "}",
              "",
              "std::vector<uint32_t> BlockchainCache::getRandomOutsByAmount(Amount amount, size_t count, uint32_t blockIndex, uint32_t startBlockIndex) const {"

            ]
          }
        },
        {
          "action": "add_above",
          "marker": "auto transactionIterator = transactions.get<TransactionInBlockTag>().find(",
          "parameters": {
            "text": [
              "if (outIndex.blockIndex >= startBlockIndex) {"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "offs.push_back(it->second.startIndex + offset);",
          "parameters": {
            "text": [
              "}"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/DatabaseBlockchainCache.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "virtual std::vector<uint32_t> getRandomOutsByAmount(uint64_t amount, size_t count,",
          "parameters": {
            "text": [
              "  virtual std::vector<uint32_t> getRandomOutsByAmount(uint64_t amount, size_t count, uint32_t blockIndex, uint32_t startBlockIndex) const override;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/DatabaseBlockchainCache.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "                                                                     uint32_t blockIndex) const {",
          "parameters": {
            "text": [
              "                                                                     uint32_t blockIndex) const {",
              "  return getRandomOutsByAmount(amount, count, blockIndex, 0);",
              "}",
              "",
              "std::vector<uint32_t> DatabaseBlockchainCache::getRandomOutsByAmount(uint64_t amount, size_t count,",
              "                                             uint32_t blockIndex, uint32_t startBlockIndex) const {"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "for (uint32_t i = 0; i < outputsToPick; ++i, globalIndexes.push_back(generator())) { }",
          "parameters": {
            "text": [
              "      for (uint32_t i = 0, j = 0; i < outputsToPick; )  {",
              "        globalIndexes.push_back(generator());",
              "        std::vector<uint32_t> lastIndexVector;",
              "        lastIndexVector.push_back(globalIndexes.back());",
              "        std::vector<PackedOutIndex> outputs;",
              "        if (extractKeyOtputIndexes(amount, Common::ArrayView<uint32_t>(lastIndexVector.data(), lastIndexVector.size()), outputs) != ExtractOutputKeysResult::SUCCESS) {",
              "        logger(Logging::DEBUGGING) << \"getRandomOutsByAmount: failed to extract key output indexes\";",
              "          throw std::runtime_error(\"Invalid output index\"); //TODO: make error code",
              "        }",
              "",
              "        std::vector<ExtendedTransactionInfo> transactions;",
              "        if (!requestExtendedTransactionInfos(outputs, database, transactions)) {",
              "          logger(Logging::TRACE) << \"getRandomOutsByAmount: requestExtendedTransactionInfos failed\";",
              "          throw std::runtime_error(\"Error while requesting transactions\"); //TODO: make error code",
              "        }",
              "        if (startBlockIndex >= transactions[0].blockIndex) {",
              "          globalIndexes.pop_back();",
              "        } else {",
              "          ++i;",
              "        }",
              "      }"
            ]
          }
        }
      ]
    }
  ]
}

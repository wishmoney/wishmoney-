{
  "file": "zawy-lwma2-difficulty-algorithm.json",
  "description": "Add Zawy LWMA2 difficulty algorithm option (https://github.com/forknote/forknote/issues/113#issuecomment-397684887)",
  "status": "In development",
  "required": [
    "core/bytecoin.json",
    "versionized-parameters.json"
  ],
  "files": [
    {
      "path": "/src/CryptoNoteCore/Currency.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "size_t m_blockGrantedFullRewardZone;",
          "parameters": {
            "text": [
              "  uint32_t m_zawyLWMA2DifficultyBlockIndex;",
              "  uint32_t m_zawyLWMA2DifficultyLastBlock;",
              "  uint64_t m_zawyLWMA2DifficultyMin;",
              "  size_t m_zawyLWMA2DifficultyN;"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "CurrencyBuilder& blockGrantedFullRewardZone(size_t val)",
          "parameters": {
            "text": [
              "  CurrencyBuilder& zawyLWMA2DifficultyBlockIndex(uint32_t val) { m_currency.m_zawyLWMA2DifficultyBlockIndex = val; return *this; }",
              "  CurrencyBuilder& zawyLWMA2DifficultyLastBlock(uint32_t val) { m_currency.m_zawyLWMA2DifficultyLastBlock = val; return *this; }",
              "  CurrencyBuilder& zawyLWMA2DifficultyMin(uint64_t val) { m_currency.m_zawyLWMA2DifficultyMin = val; return *this; }",
              "  CurrencyBuilder& zawyLWMA2DifficultyN(size_t val) { m_currency.m_zawyLWMA2DifficultyN = val; return *this; }"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "size_t blockGrantedFullRewardZone()",
          "parameters": {
            "text": [
              "  uint32_t zawyLWMA2DifficultyBlockIndex() const { return m_zawyLWMA2DifficultyBlockIndex; }",
              "  uint32_t zawyLWMA2DifficultyLastBlock() const { return m_zawyLWMA2DifficultyLastBlock; }",
              "  uint64_t zawyLWMA2DifficultyMin() const { return m_zawyLWMA2DifficultyMin; }",
              "  size_t zawyLWMA2DifficultyN() const { return m_zawyLWMA2DifficultyN; }"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/Currency.cpp",
      "changes": [
        {
          "action": "add_above",
          "marker": "blockGrantedFullRewardZone(parameters::CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE);",
          "parameters": {
            "text": [
              "zawyLWMA2DifficultyBlockIndex(parameters::ZAWY_LWMA2_DIFFICULTY_BLOCK_INDEX);",
              "zawyLWMA2DifficultyLastBlock(parameters::ZAWY_LWMA2_DIFFICULTY_LAST_BLOCK);",
              "zawyLWMA2DifficultyMin(parameters::ZAWY_LWMA2_DIFFICULTY_MIN);",
              "zawyLWMA2DifficultyN(parameters::ZAWY_LWMA2_DIFFICULTY_N);"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "m_testnet(currency.m_testnet),",
          "parameters": {
            "text": [
              "m_zawyLWMA2DifficultyBlockIndex(currency.m_zawyLWMA2DifficultyBlockIndex),",
              "m_zawyLWMA2DifficultyLastBlock(currency.m_zawyLWMA2DifficultyLastBlock),",
              "m_zawyLWMA2DifficultyMin(currency.m_zawyLWMA2DifficultyMin),",
              "m_zawyLWMA2DifficultyN(currency.m_zawyLWMA2DifficultyN),"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteConfig.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "const unsigned EMISSION_SPEED_FACTOR",
          "parameters": {
            "text": [
              "const uint32_t ZAWY_LWMA2_DIFFICULTY_BLOCK_INDEX                 = %s;"
            ],
            "replace_text_alt": [
              "const uint32_t ZAWY_LWMA2_DIFFICULTY_BLOCK_INDEX                 = 0;"
            ],
            "var": "ZAWY_LWMA2_DIFFICULTY_BLOCK_INDEX"
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteConfig.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "const unsigned EMISSION_SPEED_FACTOR",
          "parameters": {
            "text": [
              "const uint32_t ZAWY_LWMA2_DIFFICULTY_LAST_BLOCK                 = %s;"
            ],
            "replace_text_alt": [
              "const uint32_t ZAWY_LWMA2_DIFFICULTY_LAST_BLOCK                 = 0;"
            ],
            "var": "ZAWY_LWMA2_DIFFICULTY_LAST_BLOCK"
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteConfig.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "const unsigned EMISSION_SPEED_FACTOR",
          "parameters": {
            "text": [
              "const uint64_t ZAWY_LWMA2_DIFFICULTY_MIN                 = %s;"
            ],
            "replace_text_alt": [
              "const uint64_t ZAWY_LWMA2_DIFFICULTY_MIN                 = 1;"
            ],
            "var": "ZAWY_LWMA2_DIFFICULTY_MIN"
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteConfig.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "const unsigned EMISSION_SPEED_FACTOR",
          "parameters": {
            "text": [
              "const size_t ZAWY_LWMA2_DIFFICULTY_N                 = %s;"
            ],
            "replace_text_alt": [
              "const size_t ZAWY_LWMA2_DIFFICULTY_N                 = 0;"
            ],
            "var": "ZAWY_LWMA2_DIFFICULTY_N"
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/Currency.h",
      "changes": [
        {
          "action": "add_below",
          "marker": "Difficulty nextDifficulty(std::vector<uint64_t> timestamps, std::vector<Difficulty> cumulativeDifficulties) const;",
          "parameters": {
            "text": [
              "Difficulty nextDifficultyZawyLWMA2(uint8_t version, uint32_t blockIndex, std::vector<uint64_t> timestamps, std::vector<Difficulty> cumulativeDifficulties) const;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteCore/Currency.cpp",
      "changes": [
        {
          "action": "add_below",
          "marker": "#include <cctype>",
          "parameters": {
            "text": [
              "#include <math.h>"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "return nextDifficultyDefault(version, blockIndex, timestamps, cumulativeDifficulties);",
          "parameters": {
            "text": [
              "  if (m_zawyLWMA2DifficultyBlockIndex && m_zawyLWMA2DifficultyBlockIndex <= blockIndex && (m_zawyLWMA2DifficultyLastBlock == 0 || m_zawyLWMA2DifficultyLastBlock >= blockIndex)) {",
              "    return nextDifficultyZawyLWMA2(version, blockIndex, timestamps, cumulativeDifficulties);",
              "}"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "Difficulty Currency::nextDifficultyDefault(uint8_t version, uint32_t blockIndex, std::vector<uint64_t> timestamps,",
          "parameters": {
            "text": [
                "Difficulty Currency::nextDifficultyZawyLWMA2(uint8_t version, uint32_t blockIndex, std::vector<uint64_t> timestamps,",
                "  std::vector<Difficulty> cumulativeDifficulties) const {",
                "    // LWMA2 difficulty algorithm",
                "    // Copyright (c) 2017-2018 Zawy",
                "    // MIT license http://www.opensource.org/licenses/mit-license.php.",
                "    // This is an improved version of Tom Harding's (Deger8) \"WT-144\"  ",
                "    // Karbowanec, Masari, Bitcoin Gold, and Bitcoin Cash have contributed.",
                "    // See https://github.com/zawy12/difficulty-algorithms/issues/1 for other algos.",
                "    // Do not use \"if solvetime < 0 then solvetime = 1\" which allows a catastrophic exploit.",
                "    // T= target_solvetime;",
                "    // N = int(45 * (600 / T) ^ 0.3));",
                "    //",
                "    // You can manually assign N: ZAWY_LWMA2_DIFFICULTY_N",
                "",
                "    int64_t T = static_cast<int64_t>(m_difficultyTarget);",
                "    int64_t N = m_zawyLWMA2DifficultyN ? m_zawyLWMA2DifficultyN : uint32_t(45 * std::pow(((double_t)600 / T), 0.3));",
                "    int64_t  FTL=3*T;",
                "    int64_t  LWMA(0), solveTime(0), sum_3_ST(0);",
                "    Difficulty next_D, prev_D;",
                "",
                "    if (timestamps.size() > N + 1) {",
                "      timestamps.resize(N + 1);",
                "      cumulativeDifficulties.resize(N + 1);",
                "    }",
                "    size_t n = timestamps.size();",
                "    assert(n == cumulativeDifficulties.size());",
                "    assert(n <= N);",
                "    if (n <= 1)",
                "      return 1;",
                "",
                "    uint64_t initial_difficulty_guess = 100; // Dev must set.  Guess low.",
                "    if (timestamps.size() <= static_cast<uint64_t>(N)) {",
                "      return initial_difficulty_guess;",
                "    }",

                "    // Loop through N most recent blocks.",
                "    for (int64_t i = 1; i <= N; i++) {",
                "      solveTime = std::max(-FTL, std::min( (int64_t)(timestamps[i]) - (int64_t)(timestamps[i-1]), 6*T));",
                "      LWMA += solveTime * i;",
                "      if ( i > N-3 ) { sum_3_ST += solveTime; }",
                "    }",
                "",
                "    next_D = ((cumulativeDifficulties[N] - cumulativeDifficulties[0])*T*(N+1)*99)/(100*2*LWMA);",
                "    prev_D = cumulativeDifficulties[N] - cumulativeDifficulties[N-1];",
                "    if ( sum_3_ST < (8*T)/10) {",
                "      next_D = (prev_D*110)/100;",
                "    }",
                "",
                "    // minimum limit",
                "    if (next_D < m_zawyLWMA2DifficultyMin) {",
                "      next_D = m_zawyLWMA2DifficultyMin;",
                "    }",
                "",
                "    return next_D;",
                "}",
                ""
            ]
          }
        }
      ]
    }
  ]
}

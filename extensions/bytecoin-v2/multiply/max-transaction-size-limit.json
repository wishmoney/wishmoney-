{
  "file": "multiply/max-transaction-size-limit.json",
  "description": "Adds --max-transaction-size option to simplewallet and walletd + precompiled",
  "required": [
    "core/bytecoin.json",
    "max-transaction-size-limit.json",
    "multiply.json"
  ],
  "files": [
    {
      "path": "/src/SimpleWallet/SimpleWallet.h",
      "changes": [
        {
          "action": "add_below",
          "marker": "uint16_t m_daemon_port;",
          "parameters": {
            "text": [
              "uint64_t m_maxTransactionSizeLimit;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/SimpleWallet/SimpleWallet.cpp",
      "changes": [
        {
          "action": "add_above",
          "marker": "arg_testnet = { \"testnet\"",
          "parameters": {
            "text": [
              "  const command_line::arg_descriptor<uint64_t> arg_MAX_TRANSACTION_SIZE_LIMIT  = {\"MAX_TRANSACTION_SIZE_LIMIT\", \"Max transaction limit size\", 0};  "
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "Tools::wallet_rpc_server::init_options(desc_params);",
          "parameters": {
            "text": [
              "  command_line::add_arg(desc_params, arg_MAX_TRANSACTION_SIZE_LIMIT);"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "currencyBuilder.testnet(command_line::get_arg(vm, arg_testnet));",
          "parameters": {
            "text": [
              "if (command_line::get_arg(vm, arg_MAX_TRANSACTION_SIZE_LIMIT) == 0) {",
              "  uint64_t maxTxSizeLimit = command_line::get_arg(vm, arg_CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE) * 110 / 100 - CryptoNote::parameters::CRYPTONOTE_COINBASE_BLOB_RESERVED_SIZE;",
              "  currencyBuilder.maxTransactionSizeLimit(maxTxSizeLimit);",
              "  currencyBuilder.fusionTxMaxSize(maxTxSizeLimit * 30 / 100);",
              "} else {",
              "  currencyBuilder.maxTransactionSizeLimit(command_line::get_arg(vm, arg_MAX_TRANSACTION_SIZE_LIMIT));",
              "  currencyBuilder.fusionTxMaxSize(command_line::get_arg(vm, arg_MAX_TRANSACTION_SIZE_LIMIT) * 30 / 100);",
              "}"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/PaymentGateService/CoinBaseConfiguration.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "size_t DIFFICULTY_CUT;",
          "parameters": {
            "text": [
              "uint64_t MAX_TRANSACTION_SIZE_LIMIT;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/PaymentGateService/CoinBaseConfiguration.cpp",
      "changes": [
        {
          "action": "add_above",
          "marker": "DIFFICULTY_CUT=CryptoNote::parameters::DIFFICULTY_CUT;",
          "parameters": {
            "text": [
              "MAX_TRANSACTION_SIZE_LIMIT=CryptoNote::parameters::MAX_TRANSACTION_SIZE_LIMIT;"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "(\"DIFFICULTY_CUT\", po::value<size_t>()->default_value(CryptoNote::parameters::DIFFICULTY_CUT), \"size_t\")",
          "parameters": {
            "text": [
              "(\"MAX_TRANSACTION_SIZE_LIMIT\", po::value<uint64_t>()->default_value(0), \"uint64_t\")"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "if (options.count(\"DIFFICULTY_CUT\")) {",
          "parameters": {
            "text": [
              "  if (options.count(\"MAX_TRANSACTION_SIZE_LIMIT\")) {",
              "    MAX_TRANSACTION_SIZE_LIMIT = options[\"MAX_TRANSACTION_SIZE_LIMIT\"].as<uint64_t>();",
              "  }"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/PaymentGateService/PaymentGateService.cpp",
      "changes": [
        {
          "action": "add_above",
          "marker": "currencyBuilder.difficultyCut(config.coinBaseConfig.DIFFICULTY_CUT);",
          "parameters": {
            "text": [
                "if (config.coinBaseConfig.MAX_TRANSACTION_SIZE_LIMIT == 0) {",
                "  uint64_t maxTxSizeLimit = config.coinBaseConfig.CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE * 110 / 100 - CryptoNote::parameters::CRYPTONOTE_COINBASE_BLOB_RESERVED_SIZE;",
                "  currencyBuilder.maxTransactionSizeLimit(maxTxSizeLimit);",
                "  currencyBuilder.fusionTxMaxSize(maxTxSizeLimit * 30 / 100);",
                "} else {",
                "  currencyBuilder.maxTransactionSizeLimit(config.coinBaseConfig.MAX_TRANSACTION_SIZE_LIMIT);",
                "  currencyBuilder.fusionTxMaxSize(config.coinBaseConfig.MAX_TRANSACTION_SIZE_LIMIT * 30 / 100);",
                "}"
            ]
          }
        }
      ]
    }
  ]
}

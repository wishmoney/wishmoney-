{
  "file": "multiply/mandatory-transaction-in-block.json",
  "description": "Adds --mandatory-transaction option to forknoted and simplewallet",
  "required": [
    "core/bytecoin.json",
    "mandatory-transaction-in-block.json",
    "multiply.json",
    "get-blockchain-settings.json"
  ],
  "files": [
    {
      "path": "/src/Daemon/Daemon.cpp",
      "changes": [
        {
          "action": "add_below",
          "marker": "const command_line::arg_descriptor< std::vector<std::string> > arg_CHECKPOINT",
          "parameters": {
            "text": [
              "  const command_line::arg_descriptor<uint32_t>    arg_MANDATORY_TRANSACTION  = {\"MANDATORY_TRANSACTION\", \"uint32_t\", CryptoNote::parameters::MANDATORY_TRANSACTION};"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "command_line::add_arg(desc_cmd_sett, arg_CHECKPOINT);",
          "parameters": {
            "text": [
              "    command_line::add_arg(desc_cmd_sett, arg_MANDATORY_TRANSACTION);"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "currencyBuilder.genesisCoinbaseTxHex(command_line::get_arg(vm, arg_GENESIS_COINBASE_TX_HEX));",
          "parameters": {
            "text": [
              "  currencyBuilder.mandatoryTransaction(command_line::get_arg(vm, arg_MANDATORY_TRANSACTION));"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/SimpleWallet/SimpleWallet.h",
      "changes": [
        {
          "action": "add_below",
          "marker": "uint16_t m_daemon_port;",
          "parameters": {
            "text": [
              "uint32_t m_mandatoryTransaction;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/SimpleWallet/SimpleWallet.cpp",
      "changes": [
        {
          "action": "add_above",
          "marker": "arg_testnet = { \"testnet\"",
          "parameters": {
            "text": [
              "  const command_line::arg_descriptor<uint32_t> arg_MANDATORY_TRANSACTION  = {\"MANDATORY_TRANSACTION\", \"Max transaction limit size\", false};  "
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "Tools::wallet_rpc_server::init_options(desc_params);",
          "parameters": {
            "text": [
              "  command_line::add_arg(desc_params, arg_MANDATORY_TRANSACTION);"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "currencyBuilder.testnet(command_line::get_arg(vm, arg_testnet));",
          "parameters": {
            "text": [
              "currencyBuilder.mandatoryTransaction(command_line::get_arg(vm, arg_MANDATORY_TRANSACTION));"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/PaymentGateService/CoinBaseConfiguration.h",
      "changes": [
        {
          "action": "add_below",
          "marker": "uint64_t MONEY_SUPPLY;",
          "parameters": {
            "text": [
              "  uint32_t MANDATORY_TRANSACTION;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/PaymentGateService/CoinBaseConfiguration.cpp",
      "changes": [
        {
          "action": "add_below",
          "marker": "MONEY_SUPPLY=CryptoNote::parameters::MONEY_SUPPLY;",
          "parameters": {
            "text": [
              "    MANDATORY_TRANSACTION=CryptoNote::parameters::MANDATORY_TRANSACTION;"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "(\"MONEY_SUPPLY\", po::value<uint64_t>()->default_value(CryptoNote::parameters::MONEY_SUPPLY), \"uint64_t\")",
          "parameters": {
            "text": [
              "    (\"MANDATORY_TRANSACTION\", po::value<uint32_t>()->default_value(0), \"uint32_t\")"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "if (options.count(\"EMISSION_SPEED_FACTOR\")) {",
          "parameters": {
            "text": [
              "  if (options.count(\"MANDATORY_TRANSACTION\")) {",
              "    MANDATORY_TRANSACTION = options[\"MANDATORY_TRANSACTION\"].as<uint32_t>();",
              "  }"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/PaymentGateService/PaymentGateService.cpp",
      "changes": [
        {
          "action": "add_below",
          "marker": "currencyBuilder.moneySupply(config.coinBaseConfig.MONEY_SUPPLY);",
          "parameters": {
            "text": [
              "  currencyBuilder.mandatoryTransaction(config.coinBaseConfig.MANDATORY_TRANSACTION);"
            ]
          }
        }
      ]
    },

    {
      "path": "/src/Rpc/CoreRpcServerCommandsDefinitions.h",
      "description": "Changes for get-blockchain-settings.json",
      "changes": [
        {
          "action": "add_above",
          "marker": "std::string BYTECOIN_NETWORK;",
          "parameters": {
            "text": [
              "  uint32_t MANDATORY_TRANSACTION;"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "KV_MEMBER(BYTECOIN_NETWORK)",
          "parameters": {
            "text": [
              "    KV_MEMBER(MANDATORY_TRANSACTION)"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/Rpc/RpcServer.cpp",
      "description": "Changes for get-blockchain-settings.json",
      "changes": [
        {
          "action": "add_above",
          "marker": "res.core.CRYPTONOTE_NAME = m_core.getCurrency().cryptonoteName();",
          "parameters": {
            "text": [
              "  if (m_core.getCurrency().mandatoryTransaction() == 1) {",
              "    res.extensions.push_back(\"mandatory-transaction-in-block.json\");",
              "  }"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "res.core.P2P_DEFAULT_PORT = m_p2p.get_this_peer_port();",
          "parameters": {
            "text": [
              "  res.core.MANDATORY_TRANSACTION = m_core.getCurrency().mandatoryTransaction();"
            ]
          }
        }
      ]
    }
  ]
}
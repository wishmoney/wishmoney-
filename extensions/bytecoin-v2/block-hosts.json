{
  "file": "block-hosts.json",
  "description": "Block failing hosts",
  "status": "In development",
  "required": [
    "core/bytecoin.json"
  ],
  "files": [
    {
      "path": "/src/CryptoNoteConfig.h",
      "changes": [
        {
          "action": "add_below",
          "marker": "const size_t   P2P_DEFAULT_HANDSHAKE_INVOKE_TIMEOUT",
          "parameters": {
            "text": [
              "",
              "const uint32_t  P2P_FAILED_ADDR_FORGET_SECONDS                  = (60*60);     //1 hour",
              "const uint32_t  P2P_IP_BLOCKTIME                                 = (60*60*24);  //24 hour",
              "const uint32_t  P2P_IP_FAILS_BEFORE_BLOCK                       = 10;",
              "const uint32_t  P2P_IDLE_CONNECTION_KILL_INTERVAL               = (5*60); //5 minutes",
              ""
            ]
          }
        }
      ]
    },
    {
      "path": "/src/P2p/NetNodeCommon.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "virtual void for_each_connection(std::function<void(CryptoNote::CryptoNoteConnectionContext&, PeerIdType)> f) = 0;",
          "parameters": {
            "text": [
              "    virtual void drop_connection(CryptoNoteConnectionContext& context, bool add_fail) = 0;"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "virtual void for_each_connection(std::function<void(CryptoNote::CryptoNoteConnectionContext&, PeerIdType)> f) override {}",
          "parameters": {
            "text": [
              "    virtual void drop_connection(CryptoNoteConnectionContext& context, bool add_fail) override {}"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/P2p/NetNode.h",
      "changes": [
        {
          "action": "add_above",
          "marker": "virtual void for_each_connection(std::function<void(CryptoNote::CryptoNoteConnectionContext&, PeerIdType)> f) override;",
          "parameters": {
            "text": [
              "    virtual void drop_connection(CryptoNoteConnectionContext& context, bool add_fail) override;"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "bool handle_command_line(const boost::program_options::variables_map& vm);",
          "parameters": {
            "text": [
              "bool block_host(const uint32_t address_ip, time_t seconds = P2P_IP_BLOCKTIME);",
              "bool unblock_host(const uint32_t address_ip);",
              "bool add_host_fail(const uint32_t address_ip);"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "boost::uuids::uuid m_network_id;",
          "parameters": {
            "text": [
              "  std::map<uint32_t, time_t> m_blocked_hosts;",
              "  std::map<uint32_t, uint64_t> m_host_fails_score;",
              "",
              "  mutable std::mutex mutex;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/P2p/NetNode.cpp",
      "changes": [
        {
          "action": "add_above",
          "marker": "bool NodeServer::handle_command_line(const boost::program_options::variables_map& vm)",
          "parameters": {
            "text": [
              "bool NodeServer::block_host(const uint32_t address_ip, time_t seconds)",
              "{",
              "  std::unique_lock<std::mutex> lock(mutex);",
              "  m_blocked_hosts[address_ip] = time(nullptr) + seconds;",
              "",
              "  // drop any connection to that IP",
              "  std::list<boost::uuids::uuid> conns;",
              "  forEachConnection([&](P2pConnectionContext& cntxt) {",
              "    if (cntxt.m_remote_ip == address_ip)",
              "    {",
              "      conns.push_back(cntxt.m_connection_id);",
              "    }",
              "    return true;",
              "  });",
              "  for (const auto &c_id: conns) {",
              "    auto c = m_connections.find(c_id);",
              "    if (c != m_connections.end())",
              "      c->second.m_state = CryptoNoteConnectionContext::state_shutdown;",
              "  }",
              "",
              "  logger(INFO) << \"Host \" << Common::ipAddressToString(address_ip) << \" blocked.\";",
              "  return true;",
              "}",
              "//-----------------------------------------------------------------------------------",
              "bool NodeServer::unblock_host(const uint32_t address_ip)",
              "{",
              "  std::unique_lock<std::mutex> lock(mutex);",
              "  auto i = m_blocked_hosts.find(address_ip);",
              "  if (i == m_blocked_hosts.end())",
              "    return false;",
              "  m_blocked_hosts.erase(i);",
              "  logger(INFO) << \"Host \" << Common::ipAddressToString(address_ip) << \" unblocked.\";",
              "  return true;",
              "}",
              "//-----------------------------------------------------------------------------------",
              "bool NodeServer::add_host_fail(const uint32_t address_ip)",
              "{",
              "  std::unique_lock<std::mutex> lock(mutex);",
              "  uint64_t fails = ++m_host_fails_score[address_ip];",
              "  logger(DEBUGGING) << \"Host \" << Common::ipAddressToString(address_ip) << \" fail score=\" << fails;",
              "  if(fails > P2P_IP_FAILS_BEFORE_BLOCK)",
              "  {",
              "    auto it = m_host_fails_score.find(address_ip);",
              "    if (it == m_host_fails_score.end()) {",
              "      logger(DEBUGGING) << \"Internal error (add_host_fail)\" << fails;",
              "      return false;",
              "    }",
              "    it->second = P2P_IP_FAILS_BEFORE_BLOCK/2;",
              "    block_host(address_ip);",
              "  }",
              "  return true;",
              "}",
              "",
              "//-----------------------------------------------------------------------------------",
              "void  NodeServer::drop_connection(CryptoNoteConnectionContext& context, bool add_fail)",
              "{",
              "  if (add_fail)",
              "    add_host_fail(context.m_remote_ip);",
              "",
              "  context.m_state = CryptoNoteConnectionContext::state_shutdown;",
              "}",
              "",
              "//-----------------------------------------------------------------------------------"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "if (!handle_remote_peerlist(rsp.local_peerlist, rsp.node_data.local_time, context)) {",
          "parameters": {
            "text": [
              "        add_host_fail(context.m_remote_ip);"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "if (arg.node_data.network_id != m_network_id) {",
          "parameters": {
            "text": [
              "        add_host_fail(context.m_remote_ip);"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "if(!context.m_is_income) {",
          "parameters": {
            "text": [
              "        add_host_fail(context.m_remote_ip);"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/CryptoNoteProtocol/CryptoNoteProtocolHandler.cpp",
      "changes": [
        {
          "action": "add_below",
          "marker": "  } else if (result == error::AddBlockErrorCondition::BLOCK_REJECTED) {",
          "parameters": {
            "text": [
              "    m_p2p->drop_connection(context, true);"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "  } else if (result == error::AddBlockErrorCondition::BLOCK_REJECTED) {",
          "parameters": {
            "text": [
              "    m_p2p->drop_connection(context, true);"
            ]
          }
        }
      ]
    }
  ]
}

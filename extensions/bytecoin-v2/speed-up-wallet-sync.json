{
  "file": "speed-up-wallet-sync.json",
  "description": "Sync not from 0 when not necessary",
  "bugs": "It breaks reset and sync from import wallets",
  "required": [
    "core/bytecoin.json"
  ],
  "files": [
    {
      "path": "/src/Wallet/WalletGreen.h",
      "changes": [
        {
          "action": "add_below",
          "marker": "uint64_t m_upperTransactionSizeLimit;",
          "parameters": {
            "text": [
              "  uint32_t m_totalBlockCount;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/Wallet/WalletGreen.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "sub.syncStart.height = 0;",
          "parameters": {
            "text": [
              ""
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "sub.syncStart.timestamp = std::max(creationTimestamp, ACCOUNT_CREATE_TIME_ACCURACY) - ACCOUNT_CREATE_TIME_ACCURACY;",
          "parameters": {
            "text": [
              "//    sub.syncStart.height = 0;",
              "    sub.syncStart.height = m_totalBlockCount;"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "sub.syncStart.timestamp = std::max(static_cast<uint64_t>(wallet.creationTimestamp), ACCOUNT_CREATE_TIME_ACCURACY) - ACCOUNT_CREATE_TIME_ACCURACY;",
          "parameters": {
            "text": [
              "    sub.syncStart.height = 0;"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "void WalletGreen::onSynchronizationProgressUpdated(uint32_t processedBlockCount, uint32_t totalBlockCount) {",
          "parameters": {
            "text": [
              "//  m_totalBlockCount = totalBlockCount;",
              "  m_totalBlockCount = 0;"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "return doCreateAddress(spendPublicKey, spendSecretKey, 0);",
          "parameters": {
            "text": [
              "  uint64_t creationTimestamp = static_cast<uint64_t>(time(nullptr));",
              "  return doCreateAddress(spendPublicKey, spendSecretKey, creationTimestamp);"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "return doCreateAddress(spendPublicKey, NULL_SECRET_KEY, 0);",
          "parameters": {
            "text": [
              "  uint64_t creationTimestamp = static_cast<uint64_t>(time(nullptr));",
              "  return doCreateAddress(spendPublicKey, NULL_SECRET_KEY, creationTimestamp);"
            ]
          }
        }
      ]
    }
  ]
}

{
  "file": "simplewallet-import-keys.json",
  "description": "Adds import keys functionality to simplewallet",
  "required": [
    "core/bytecoin.json"
  ],
  "files": [
    {
      "path": "/src/SimpleWallet/SimpleWallet.cpp",
      "changes": [
        {
          "action": "replace",
          "marker": "std::cout << \"Nor 'generate-new-wallet' neither 'wallet-file' argument was specified.\\nWhat do you want to do?\\n[O]pen existing wallet, [G]enerate new wallet file or [E]xit.\\n\";",
          "parameters": {
            "text": [
              "    std::cout << \"Nor 'generate-new-wallet' neither 'wallet-file' argument was specified.\\nWhat do you want to do?\\n[O]pen existing wallet, [G]enerate new wallet file, [I]mport wallet or [E]xit.\\n\";"
            ]
          }
        },


        {
          "action": "replace",
          "marker": "std::cout << \"Nor 'generate-new-wallet' neither 'wallet-file' argument was specified.\\nWhat do you want to do?\\n[O]pen existing wallet, [G]enerate new wallet file or [E]xit.\\n\";",
          "parameters": {
            "text": [
              "    std::cout << \"Nor 'generate-new-wallet' neither 'wallet-file' argument was specified.\\nWhat do you want to do?\\n[O]pen existing wallet, [G]enerate new wallet file, [I]mport wallet or [E]xit.\\n\";"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "if (!(c == 'O' || c == 'G' || c == 'E' || c == 'o' || c == 'g' || c == 'e')) {",
          "parameters": {
            "text": [
              "      if (!(c == 'O' || c == 'G' || c == 'E' || c == 'I' || c == 'o' || c == 'g' || c == 'e' || c == 'i')) {"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "if (c == 'g' || c == 'G') {",
          "parameters": {
            "text": [
                "    if (c == 'i' || c == 'I') {",
                "      m_import_new = userInput;",
                "    } else if (c == 'g' || c == 'G') {"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "if (!m_generate_new.empty() && !m_wallet_file_arg.empty()) {",
          "parameters": {
            "text": [
                "  if (!m_generate_new.empty() && !m_wallet_file_arg.empty() && !m_import_new.empty()) {"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "bool simple_wallet::close_wallet()",
          "parameters": {
            "text": [
                "bool simple_wallet::new_wallet(Crypto::SecretKey &secret_key, Crypto::SecretKey &view_key, const std::string &wallet_file, const std::string& password) {",
                "  m_wallet_file = wallet_file;",
                "",
                "  m_wallet.reset(new WalletLegacy(m_currency, *m_node.get()));",
                "  m_node->addObserver(static_cast<INodeObserver*>(this));",
                "  m_wallet->addObserver(this);",
                "  try {",
                "    m_initResultPromise.reset(new std::promise<std::error_code>());",
                "    std::future<std::error_code> f_initError = m_initResultPromise->get_future();",
                "",
                "    AccountKeys wallet_keys;",
                "    wallet_keys.spendSecretKey = secret_key;",
                "    wallet_keys.viewSecretKey = view_key;",
                "    Crypto::secret_key_to_public_key(wallet_keys.spendSecretKey, wallet_keys.address.spendPublicKey);",
                "    Crypto::secret_key_to_public_key(wallet_keys.viewSecretKey, wallet_keys.address.viewPublicKey);",
                "",
                "    m_wallet->initWithKeys(wallet_keys, password);",
                "    auto initError = f_initError.get();",
                "    m_initResultPromise.reset(nullptr);",
                "    if (initError) {",
                "      fail_msg_writer() << \"failed to generate new wallet: \" << initError.message();",
                "      return false;",
                "    }",
                "",
                "    try {",
                "      CryptoNote::WalletHelper::storeWallet(*m_wallet, m_wallet_file);",
                "    } catch (std::exception& e) {",
                "      fail_msg_writer() << \"failed to save new wallet: \" << e.what();",
                "      throw;",
                "    }",
                "",
                "    AccountKeys keys;",
                "    m_wallet->getAccountKeys(keys);",
                "",
                "    logger(INFO, BRIGHT_WHITE) <<",
                "      \"Imported wallet: \" << m_wallet->getAddress() << std::endl;",
                "  }",
                "  catch (const std::exception& e) {",
                "    fail_msg_writer() << \"failed to import wallet: \" << e.what();",
                "    return false;",
                "  }",
                "",
                "  success_msg_writer() <<",
                "    \"**********************************************************************\\n\" <<",
                "    \"Your wallet has been imported.\\n\" <<",
                "    \"Use \\\"help\\\" command to see the list of available commands.\\n\" <<",
                "    \"Always use \\\"exit\\\" command when closing simplewallet to save\\n\" <<",
                "    \"current session's state. Otherwise, you will possibly need to synchronize \\n\" <<",
                "    \"your wallet again. Your wallet key is NOT under risk anyway.\\n\" <<",
                "    \"**********************************************************************\";",
                "  return true;",
                "}",
                "//----------------------------------------------------------------------------------------------------"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/SimpleWallet/SimpleWallet.cpp",
      "multiline": true,
      "changes": [
        {
          "action": "replace",
          "marker": "if \\(!m_generate_new.empty\\(\\)\\) {\\s+std::string ignoredString;[^}]+}",
          "parameters": {
            "text": [
                "  if (!m_generate_new.empty() || !m_import_new.empty()) {",
                "    std::string ignoredString;",
                "    if (!m_generate_new.empty()) {",
                "      WalletHelper::prepareFileNames(m_generate_new, ignoredString, walletFileName);",
                "    } else if (!m_import_new.empty()) {",
                "      WalletHelper::prepareFileNames(m_import_new, ignoredString, walletFileName);",
                "    }",
                "    boost::system::error_code ignore;",
                "    if (boost::filesystem::exists(walletFileName, ignore)) {",
                "      fail_msg_writer() << walletFileName << \" already exists\";",
                "      return false;",
                "    }"
            ]
          }
        },
        {
          "action": "replace",
          "marker": "} else {\\s+m_wallet\\.reset\\(new WalletLegacy\\(m_currency, \\*m_node\\)\\);",
          "parameters": {
            "text": [
                "} else if (!m_import_new.empty()) {",
                "    std::string walletAddressFile = prepareWalletAddressFilename(m_import_new);",
                "    boost::system::error_code ignore;",
                "    if (boost::filesystem::exists(walletAddressFile, ignore)) {",
                "      logger(ERROR, BRIGHT_RED) << \"Address file already exists: \" + walletAddressFile;",
                "      return false;",
                "    }",
                "",
                "    std::string private_spend_key_string;",
                "    std::string private_view_key_string;",
                "    do {",
                "      std::cout << \"Private Spend Key: \";",
                "      std::getline(std::cin, private_spend_key_string);",
                "      boost::algorithm::trim(private_spend_key_string);",
                "    } while (private_spend_key_string.empty());",
                "    do {",
                "      std::cout << \"Private View Key: \";",
                "      std::getline(std::cin, private_view_key_string);",
                "      boost::algorithm::trim(private_view_key_string);",
                "    } while (private_view_key_string.empty());",
                "",
                "    Crypto::Hash private_spend_key_hash;",
                "    Crypto::Hash private_view_key_hash;",
                "    size_t size;",
                "    if (!Common::fromHex(private_spend_key_string, &private_spend_key_hash, sizeof(private_spend_key_hash), size) || size != sizeof(private_spend_key_hash)) {",
                "      return false;",
                "    }",
                "    if (!Common::fromHex(private_view_key_string, &private_view_key_hash, sizeof(private_view_key_hash), size) || size != sizeof(private_spend_key_hash)) {",
                "      return false;",
                "    }",
                "    Crypto::SecretKey private_spend_key = *(struct Crypto::SecretKey *) &private_spend_key_hash;",
                "    Crypto::SecretKey private_view_key = *(struct Crypto::SecretKey *) &private_view_key_hash;",
                "",
                "    if (!new_wallet(private_spend_key, private_view_key, walletFileName, pwd_container.password())) {",
                "      logger(ERROR, BRIGHT_RED) << \"account creation failed\";",
                "      return false;",
                "    }",
                "",
                "    if (!writeAddressFile(walletAddressFile, m_wallet->getAddress())) {",
                "      logger(WARNING, BRIGHT_RED) << \"Couldn't write wallet address file: \" + walletAddressFile;",
                "    }",
                "  } else {",
                "    m_wallet.reset(new WalletLegacy(m_currency, *m_node));",
                ""
            ]
          }
        }
      ]
    },
    {
      "path": "/src/SimpleWallet/SimpleWallet.h",
      "changes": [
        {
          "action": "add_below",
          "marker": "bool new_wallet(const std::string &wallet_file, const std::string& password);",
          "parameters": {
            "text": [
              "bool new_wallet(Crypto::SecretKey &secret_key, Crypto::SecretKey &view_key, const std::string &wallet_file, const std::string& password);"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "std::string m_generate_new;",
          "parameters": {
            "text": [
              "std::string m_import_new;"
            ]
          }
        }
      ]
    }
  ]
}
